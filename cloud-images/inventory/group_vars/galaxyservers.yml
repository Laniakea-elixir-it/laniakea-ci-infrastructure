## python configuration
galaxy_virtualenv_command: /usr/bin/python3 -m virtualenv

##postgresql configuration
postgresql_version: 15
postgresql_objects_users:
  - name: galaxy
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy
  - name: galaxy_tools
    owner: galaxy

## Path configuration
export_dir: /export
database_path: '{{ export_dir }}/database'

## Galaxy configuration
galaxy_create_user: true
galaxy_force_checkout: true
galaxy_separate_privileges: yes
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_privsep_user: galaxy
galaxy_user: { name: galaxy, shell: /bin/bash, uid: 5001}
galaxy_group: { name: galaxy, gid: 5001 }
galaxy_root: /home/galaxy/galaxy
galaxy_server_dir: '{{ galaxy_root }}/server' 
galaxy_mutable_config_dir: '{{ galaxy_root }}/config' 
galaxy_config_file: '{{ galaxy_mutable_config_dir }}/galaxy.yml' 
galaxy_commit_id: release_24.2
galaxy_config_style: yaml
galaxy_systemd_mode: 'gravity'

# Galaxy Job Configuration
galaxy_job_config:
  runners:
    local_runner:
      load: galaxy.jobs.runners.local:LocalJobRunner
      workers: 4
  handling:
    assign: ['db-skip-locked']
  execution:
    default: local_env
    environments:
      local_env:
        runner: local_runner
        tmp_dir: true
  tools:
    - class: local # these special tools that aren't parameterized for remote execution - expression tools, upload, etc
      environment: local_env

galaxy_config:
  galaxy:
    brand: "laniakea-express"
    admin_users: "admin@server.com"
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    install_database_connection: "postgresql:///galaxy_tools?host=/var/run/postgresql"
    check_migrate_tools: false
    allow_user_creation: "True"
    allow_user_impersonation: "True"
    new_user_dataset_access_role_default_private: "True"
    #conda_auto_install: true
    ##
    file_path: '{{ export_dir }}'
    tool_dependency_dir: '{{ export_dir }}/tool_deps'
    conda_prefix: '{{ export_dir }}/tool_deps/_conda'
    job_working_directory: '{{ export_dir }}/database/job_working_dir'
    galaxy_url_prefix: /galaxy
    job_config: "{{ galaxy_job_config }}"
    #TUS
    tus_upload_store: "{{ database_path }}/tus"
    galaxy_infrastructure_url: "https://{{ inventory_hostname }}/galaxy"

  gravity:
    process_manager: systemd
    galaxy_root: "{{ galaxy_root }}/server"
    galaxy_user: galaxy
    virtualenv: "{{ galaxy_root }}/venv"
      #app_server: gunicorn
    gunicorn:
      # listening options
      bind: "127.0.0.1:4001"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      extra_args: '--forwarded-allow-ips="*"'
      preload: true
    celery:
      concurrency: 2
      loglevel: DEBUG
    handlers:
      handler:
        processes: 3
        pools:
          - job-handler
          - workflow-scheduler
    tusd:
      enable: true
      tusd_path: /usr/local/sbin/tusd
      upload_dir: "{{ export_dir }}/database/tus"

## nginx
nginx_selinux_allow_local_connections: true
nginx_server_src_dir: ../templates/galaxy/nginx
nginx_servers:
  - galaxy
nginx_enable_default_server: false
nginx_conf_http:
      client_max_body_size: 1g
      gzip: "on" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.
      gzip_proxied: "any"
      gzip_static: "on" # The ngx_http_gzip_static_module module allows sending precompressed files with the ".gz" filename extension instead of regular files.
      gzip_vary: "on"
      gzip_min_length: 128
      gzip_comp_level: 6 # Tradeoff of better compression for slightly more CPU time.
      gzip_types: |
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/xml+rss
        application/xhtml+xml
        application/x-font-ttf
        application/x-font-opentype
        image/png
        image/svg+xml
        image/x-icon
nginx_conf_user: galaxy
nginx_conf_group: galaxy

enable_galaxy_ie: false
enable_interactive_tools: false

# Miniconda
miniconda_prefix: '{{ export_dir }}/tool_deps/_conda'
miniconda_manage_dependencies: true
galaxy_conda_create_env: true
miniconda_version: "25.7.0"
galaxy_conda_env_channels:
  - conda-forge
miniconda_channels:
  - conda-forge

# TUS
galaxy_tusd_port: 1080
